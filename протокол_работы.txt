
p. 377 Managing Concurrent Processes

Вопрос:

Опишите класс CyclicBarrier.

Ответ:

Класс java.util.concurrent.CyclicBarrier предназначен для остановки на определенном месте в ожидании момента, когда до  этого места дойдет заданное число потоков.
Имеет конструкторы
  CyclicBarrier(int parties)
  CyclicBarrier(int parties, Runnable barrierAction) - после снятия барьера выполняется barrierAction
 
 Барьер устанавливается методами
 int await() throws InterruptedException, BrokenBarrierException
 int await(long timeout, TimeUnit unit) throws InterruptedException, BrokenBarrierException, TimeoutException - барьер снимается, если истек таймаут.
 
===

Вопрос:

Пример использования CyclicBarrier. 
 
import java.util.concurrent.*;
public class LionPenManager {
    public void performTask(CyclicBarrier cb) {
        try {
            someAction();
            cb.await();
            otherAction();
        } catch (InterruptedException | BrokenBarrierException e) {
            // Handle checked exceptions here
        }
    }
    public static void main(String[] args) {
        ExecutorService service = null;
        try {
            LionPenManager manager = new LionPenManager();
            CyclicBarrier cb = new CyclicBarrier(4);
            for(int i=0; i<4; i++)
                service.submit(() -> manager.performTask(cb));
        } finally {
            if(service != null) service.shutdown();
        }
    }
}

====

Вопрос:
Если в пуле потоков меньше, чем установлено в используемом CyclicBarrier, то будет deadlock.

====

Вопрос:
После того как CyclicBarrier открылся, он пригоден к повторному использованию, т.е. следующий поток после открытия станет первым в новой очереди ожидающих.

===

p.381 Applying the Fork/Join Framework

