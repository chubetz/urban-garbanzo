===

Вопрос:

Метод compute() в RecursiveAction и RecursiveTask - protected

===

Вопрос:

Метод invokeAll класса ForkJoinTask может принимать либо два объекта ForkJoinTask, либо варарг из них же.

===

Вопрос:

Метод compute() в RecursiveAction и RecursiveTask не принимает аргументов. Поэтому всю необходимую для выполнения задачу информацию принято передавать через конструктор.

===

Если есть несколько участков кода, синхронизированных по одному объекту, то в момент выполнения одного из этих участков блокируется доступ не только к этому участку, но и к остальным.

===

Вопрос:

Опишите три ситуации нарушения жизнеспособности программы с точки зрения конкурентности.

Ответ:

1. Deadlock. Поток A заблокировал ресурс X и ожидает ресурса Y, который в свою очередь заблокирован потоком B, ждущим ресурса X. Ожидание будет бесконечным, так как ресурсы никогда не освободятся.

2. Starvation. Поток не может получить доступ к ресурсу, так как его каждый раз получают другие потоки.

3. Livelock. Потоки не могут получить доступ к ресурсам, но не находятся в режиме ожидания, просто при каждой попытке доступа к ресурсам "мешают" друг другу (взаимное Starvation).

====

p.394 Review Questions

