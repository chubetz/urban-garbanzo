<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Java programming tutorial: Date, Time and Calendar</title>
<link href="Java%20programming%20tutorial%20%20Date,%20Time%20and%20Calendar_files/programming_notes.css" rel="stylesheet" type="text/css">
<link rel="shortcut icon" href="http://www.ntu.edu.sg/home/ehchua/programming/favicon.ico" type="image/x-icon"><link id="avast_os_ext_custom_font" href="Java%20programming%20tutorial%20%20Date,%20Time%20and%20Calendar_files/css.css" rel="stylesheet" type="text/css"><link href="Java%20programming%20tutorial%20%20Date,%20Time%20and%20Calendar_files/css_003.css" rel="stylesheet" type="text/css"><link href="Java%20programming%20tutorial%20%20Date,%20Time%20and%20Calendar_files/css_005.css" rel="stylesheet" type="text/css"><link href="Java%20programming%20tutorial%20%20Date,%20Time%20and%20Calendar_files/css_002.css" rel="stylesheet" type="text/css"><link href="Java%20programming%20tutorial%20%20Date,%20Time%20and%20Calendar_files/css_004.css" rel="stylesheet" type="text/css"><style id="wrc-css" type="text/css">.wrcx {display:none} .r .wrcx,  .fc .wrcx, #rhsline ol .wrcx {display:inline-block !important; position:relative !important; background: url("moz-extension://1021649b-e01d-46bf-8ed3-2fcecb64a3d2/common/ui/icons/serp-none.png") right no-repeat},.wrcx {display:none} .osl .wrcx, .vresult .r, .tl .r .wrcx{ display: none;}
.wrc0 {display:none} .r .wrc0,  .fc .wrc0, #rhsline ol .wrc0 {display:inline-block !important; position:relative !important; background: url("moz-extension://1021649b-e01d-46bf-8ed3-2fcecb64a3d2/common/ui/icons/serp-none.png") right no-repeat},.wrc0 {display:none} .osl .wrc0, .vresult .r, .tl .r .wrc0{ display: none;}
.wrc1 {display:none} .r .wrc1,  .fc .wrc1, #rhsline ol .wrc1 {display:inline-block !important; position:relative !important; background: url("moz-extension://1021649b-e01d-46bf-8ed3-2fcecb64a3d2/common/ui/icons/serp-ok.png") right no-repeat},.wrc1 {display:none} .osl .wrc1, .vresult .r, .tl .r .wrc1{ display: none;}
.wrc2 {display:none} .r .wrc2,  .fc .wrc2, #rhsline ol .wrc2 {display:inline-block !important; position:relative !important; background: url("moz-extension://1021649b-e01d-46bf-8ed3-2fcecb64a3d2/common/ui/icons/serp-attention.png") right no-repeat},.wrc2 {display:none} .osl .wrc2, .vresult .r, .tl .r .wrc2{ display: none;}
.wrc3 {display:none} .r .wrc3,  .fc .wrc3, #rhsline ol .wrc3 {display:inline-block !important; position:relative !important; background: url("moz-extension://1021649b-e01d-46bf-8ed3-2fcecb64a3d2/common/ui/icons/serp-error.png") right no-repeat},.wrc3 {display:none} .osl .wrc3, .vresult .r, .tl .r .wrc3{ display: none;}
#wrcHoverDiv .aos-tooltip-logo-img { background-image: url(moz-extension://1021649b-e01d-46bf-8ed3-2fcecb64a3d2/common/ui/icons/logo-white.png); }
#wrcHoverDiv .aos-tooltip-attention .aos-tooltip-logo-img { background-image: url(moz-extension://1021649b-e01d-46bf-8ed3-2fcecb64a3d2/common/ui/icons/logo-dark.png); }</style></head>

<body><div id="wrcHoverDiv"><div id="wrccontainer" class="aos-tooltip"><div class="aos-tooltip-arrow"></div><a class="aos-tooltip-logo"><span class="aos-tooltip-logo-img"></span><span class="aos-tooltip-logo-text">Online Security</span></a><div id="wrcratingicon" class="aos-tooltip-icon" style="background-image: url(&quot;moz-extension://1021649b-e01d-46bf-8ed3-2fcecb64a3d2/common/ui/icons/unknown.png&quot;);"></div><div id="wrcratingtext" class="aos-tooltip-text">У этого сайта нет рейтинга</div></div></div>

<!-- Begin the outermost container division -->
<div id="container">

<!-- print header -->
<script type="text/javascript" src="Java%20programming%20tutorial%20%20Date,%20Time%20and%20Calendar_files/header.js"></script><div id="header">
<p>yet another insignificant programming notes... &nbsp;&nbsp;| &nbsp;&nbsp;<a href="http://www.ntu.edu.sg/home/ehchua/programming/index.html">HOME</a></p>
</div>


<!-- begin main content division -->
<div id="content">

<h1>Java Programming Language</h1>
<h2>Date and Time - Creation, Operation and Formatting</h2>

<h3>Introduction</h3>
<p>There are many Java classes available for date/time and it becomes pretty confusing, in particular, the <code>Date</code> and <code>Calendar</code> clases. The documentation is not very clear, and I have to look into the source codes to understand the salient features.</p>

<h3>java.util.Date and java.text.SimpleDateFormat</h3>

<p><code>Date</code> is sufficient if you need only a <em>current timestamp</em> in your application, and you do not need to operate on dates, e.g., one-week later.  You can further use <code>SimpleDateFormat</code> to control the date/time display format.</p>

<p>The class <code>java.util.Date</code> represents a specific instance   in time, with millisecond precision. It has two constructors:</p>

<ul>
<li><code>Date()</code>: Allocate a <code>Date</code> instance with the current time.</li>
<li><code>Date(long millisSinceEpoch)</code>: Allocate a <code>Date</code> instance with the given time.</li>
</ul>

<p>From the source code, the no-arg constructor invokes <code>System.currentTimeMillis()</code> to get the milliseconds since January 1, 1970, 00:00:00 GMT (known as "epoch") and stores in a private variable <code>fastTime</code>. Take note that epoch is <em>absolute</em> and does not depends on local time zones.</p>

<p>Most of the methods in <code>Date</code> are deprecated (for lack of internationalization support), except:</p>

<ul>
<li><code>long getTime()</code>: returns the number of milliseconds since epoch.</li>
<li><code>String toString()</code>: returns a date/time string in <em>local</em> time-zone using the <em>default locale</em> in the format: <code>dow mon dd hh:mm:ss zzz yyyy</code>, where <code>dow</code> is the day of week (Sun, ..., Sat), <code>mon</code> is the month (Jan, ..., Dec), zzz is the time zone. Take note that although <code>Date</code> is represented based on the absolute epoch, the <code>toString()</code> displays the local time, according to the default time zone.</li>
</ul>

<p>The <code>Date</code>'s <code>toString()</code> method has a fixed date/time display format. You can use <code>SimpleDateFormat</code> to control the display format.</p>

<p><strong>EXAMPLE:</strong></p>
<pre class="code-listing">import java.text.SimpleDateFormat;
import java.util.Date;
  
public class <strong>DateTest</strong> {
   public static void main(String[] args) {
      Date now = new Date();
      System.out.println("toString(): " + now);  <span class="code-comment">// dow mon dd hh:mm:ss zzz yyyy</span>
      
      <span class="code-comment">// SimpleDateFormat can be used to control the date/time display format:
      //   E (day of week): 3E or fewer (in text xxx), &gt;3E (in full text)
      //   M (month): M (in number), MM (in number with leading zero)
      //              3M: (in text xxx), &gt;3M: (in full text full)
      //   h (hour): h, hh (with leading zero)
      //   m (minute)
      //   s (second)
      //   a (AM/PM)
      //   H (hour in 0 to 23)
      //   z (time zone)</span>
      SimpleDateFormat dateFormatter = new SimpleDateFormat("E, y-M-d 'at' h:m:s a z");
      System.out.println("Format 1:   " + dateFormatter.format(now));

      dateFormatter = new SimpleDateFormat("E yyyy.MM.dd 'at' hh:mm:ss a zzz");
      System.out.println("Format 2:   " + dateFormatter.format(now));
      
      dateFormatter = new SimpleDateFormat("EEEE, MMMM d, yyyy");
      System.out.println("Format 3:   " + dateFormatter.format(now));
   }
}</pre>

<pre class="code-output">toString(): Sat Sep 25 21:27:01 SGT 2010
Format 1:   Sat, 10-9-25 at 9:27:1 PM SGT
Format 2:   Sat 2010.09.25 at 09:27:01 PM SGT
Format 3:   Saturday, September 25, 2010</pre>

<p>Summary:</p>
<ul>
<li><code>Date</code> class is <em>sufficient</em> if you just need <em>a simple timestamp</em>.</li>
<li>You could use <code>SimpleDateFormat</code> to control the date/time display format.</li>
</ul>

<p>Use <code>java.util.Calendar</code> class if you need to extract 
year, month, day, hour, minute, and second, or manipulating these field 
(e.g., 7 days later, 3 weeks earlier). </p>
<p>Use <code>java.text.DateFormat</code> to format a <code>Date</code> (form <code>Date</code> to text) and parse a date string (from text to <code>Date</code>). <code>SimpleDateForamt</code> is a subclass of <code>DateFormat</code>.</p>

<p><code>Date</code> is legacy class, which does not support internationalization.<code> </code><code>Calendar</code> and <code>DateFormat</code> support locale (you need to consider locale only if you program is to be run in many countries concurrently).</p>


<h3>java.util.Calendar &amp; java.util.GregorianCalendar</h3>
<p>The <code>Calendar</code> class provides support for:</p>
<ol>
<li>maintaining a set of calendar fields such as <code>YEAR</code>, <code>MONTH</code>, <code>DAY_OF_MONTH</code>, <code>HOUR</code>, <code>MINUTE</code>, <code>SECOND</code>, <code>MILLISECOND</code>; and</li>
<li>manipulating these calendar fields, such as getting the date of the previous week, roll forward by 3 days.</li>
</ol>

<p><code>Calendar</code> provides internationalization support.</p>
<p><code>Calendar</code> is a abstract class, and you cannot use the constructor to create an instance. Instead, you use the static method <code>Calendar.getInstance()</code> to instantiate an implementation sub-class.</p>

<ul>
<li><code>Calendar.getInstance()</code>: return a <code>Calendar</code> instance based on the current time in the default time zone with the default locale.</li>
<li><code>Calendar.getInstance(TimeZone zone)</code></li>
<li><code>Calendar.getInstance(Locale aLocale)</code></li>
<li><code>Calendar.getInstance(TimeZone zone, Locale aLocale)</code></li>
</ul>

<p>Looking into the source code reveals that: <code>getInstance()</code> returns a <code>GregorianCalendar</code> instance for all locales, (except <code>BuddhistCalendar</code> for Thai ("<code>th_TH</code>") and  <code>JapaneseImperialCalendar</code> for Japanese ("<code>ja_JP</code>")).</p>
<p>The most important method in <code>Calendar</code> is <code>get(int calendarField)</code>, which produces an <code>int</code>. The <code>calendarField</code> are defined as <code>static</code> constant and includes:</p>
<ul>
  <li><code>get(Calendar.DAY_OF_WEEK)</code>: returns 1 (<code>Calendar.SUNDAY</code>) to 7 (<code>Calendar.SATURDAY</code>).</li>
  <li><code>get(Calendar.YEAR):</code> year</li>
<li><code>get(Calendar.MONTH)</code>: returns 0 (<code>Calendar.JANUARY</code>) to 11 (<code>Calendar.DECEMBER</code>).</li>
<li><code>get(Calendar.DAY_OF_MONTH)</code>, <code>get(Calendar.DATE)</code>: 1 to 31</li>
<li><code>get(Calendar.HOUR_OF_DAY)</code>: 0 to 23</li>
<li><code>get(Calendar.MINUTE)</code>: 0 to 59</li>
<li><code>get(Calendar.SECOND)</code>: 0 to 59</li>
<li><code>get(Calendar.MILLISECOND)</code>: 0 to 999</li>
<li><code>get(Calendar.HOUR)</code>: 0 to 11, to be used together with <code>Calendar.AM_PM</code>.</li>
<li><code>get(Calendar.AM_PM)</code>: returns 0 (<code>Calendar.AM</code>) or 1 (<code>Calendar.PM</code>).</li>
<li><code>get(Calendar.DAY_OF_WEEK_IN_MONTH)</code>: <code>DAY_OF_MONTH</code> 1  through 7 always correspond to <code>DAY_OF_WEEK_IN_MONTH</code> 1; 8 through 14 correspond to <code>DAY_OF_WEEK_IN_MONTH</code> 2, and so on.</li>
<li><code>get(Calendar.DAY_OF_YEAR)</code>: 1 to 366</li>
<li><code>get(Calendar.ZONE_OFFSET)</code>: GMT offset value of the time zone.</li>
<li><code>get(Calendar.ERA)</code>: Indicate AD (<code>GregorianCalendar.AD</code>), BC (<code>GregorianCalendar.BC</code>).</li>
</ul>

<p>A date in <code>Calendar</code> can be represented as:</p>
<pre class="code-syntax">YEAR + MONTH + DAY_OF_MONTH
YEAR + MONTH + WEEK_OF_MONTH + DAY_OF_WEEK
YEAR + MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK
YEAR + DAY_OF_YEAR
YEAR + DAY_OF_WEEK + WEEK_OF_YEAR</pre>

<p>A time in <code>Calendar</code> can be represented as:</p>
<pre class="code-syntax">HOUR_OF_DAY
AM_PM + HOUR</pre>

<p><strong>Example:</strong></p>

<pre class="code-listing"><span class="code-comment">// Get the year, month, day, hour, minute, second</span>
import java.util.Calendar;
public class <strong>GetYMDHMS</strong> {
   public static void main(String[] args) {
      Calendar cal = Calendar.getInstance();
      <span class="code-comment">// You cannot use Date class to extract individual Date fields</span>
      int year = cal.get(Calendar.YEAR);
      int month = cal.get(Calendar.MONTH);      <span class="code-comment">// 0 to 11</span>
      int day = cal.get(Calendar.DAY_OF_MONTH);
      int hour = cal.get(Calendar.HOUR_OF_DAY);
      int minute = cal.get(Calendar.MINUTE);
      int second = cal.get(Calendar.SECOND);
   
      System.out.printf("Now is %4d/%02d/%02d %02d:%02d:%02d\n",  <span class="code-comment">// Pad with zero</span>
          year, month+1, day, hour, minute, second);
   }
}</pre>

<p><code>Calendar</code> has these setters and operations:</p>
<ul>
<li><code>void set(int calendarField, int value)</code></li>
<li><code>void set(int year, int month, int date)</code></li>
<li><code>void set(int year, int month, int date, int hour, int minute, int second)</code></li>
<li><code>void add(int field, int amount)</code>: Adds or subtracts the specified amount of time to the given calendar field, based on the calendar's rules.</li>
<li><code>void roll(int calendarField, boolean up)</code>: Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields.</li>
<li><code>void roll(int calendarField, int amount)</code>: Adds the specified (signed) amount to the specified calendar field without changing larger fields.</li>

</ul>

<p>Other frequently-used methods are:</p>
<ul>
<li><code>Date getTime()</code>: return a <code>Date</code> object based on this <code>Calendar</code>'s value.</li>
<li><code>void setTime(Date date)</code></li>
<li><code>long getTimeInMills()</code>: Returns this <code>Calendar's</code> time value in milliseconds.</li>
<li><code>void setTimeInMillis(long millis)</code></li>
<li><code>void setTimeZone(TimeZone value)</code></li>
</ul>

<h4>Conversion between Calendar and Date</h4>
<p>You can use <code>getTime()</code> and <code>setTime()</code> to convert between <code>Calendar</code> and <code>Date</code>.</p>
<pre class="code-syntax">Date getTime(): Returns a Date object representing this Calendar's time value
void setTime(Date aDate): Sets this Calendar's time with the given Date instance</pre>


<p><strong>EXAMPLE:</strong></p>
<pre class="code-listing">import java.util.Date;
import java.util.Calendar;
import java.text.SimpleDateFormat;
  
public class <strong>CalendarTest</strong> {
   public static void main(String[] args) {
      Calendar cal = Calendar.getInstance();   <span class="code-comment">// GregorianCalendar</span>
      System.out.println("Calendar's toString() is : " + cal + "\n");
      System.out.println("Time zone is: " + cal.getTimeZone() + "\n");
  
      <span class="code-comment">// An Easier way to print the timestamp by getting a Date instance</span>
      Date date = cal.getTime();
      System.out.println("Current date and time in Date's toString() is : " + date + "\n");
  
      <span class="code-comment">// Print Calendar's field</span>
      System.out.println("Year  : " + cal.get(Calendar.YEAR));
      System.out.println("Month : " + cal.get(Calendar.MONTH));
      System.out.println("Day of Month : " + cal.get(Calendar.DAY_OF_MONTH));
      System.out.println("Day of Week  : " + cal.get(Calendar.DAY_OF_WEEK));
      System.out.println("Day of Year  : " + cal.get(Calendar.DAY_OF_YEAR));
      System.out.println("Week of Year : " + cal.get(Calendar.WEEK_OF_YEAR));
      System.out.println("Week of Month : " + cal.get(Calendar.WEEK_OF_MONTH));
      System.out.println("Day of the Week in Month : " + cal.get(Calendar.DAY_OF_WEEK_IN_MONTH));
      System.out.println("Hour  : " + cal.get(Calendar.HOUR));
      System.out.println("AM PM : " + cal.get(Calendar.AM_PM));
      System.out.println("Hour of the Day : " + cal.get(Calendar.HOUR_OF_DAY));
      System.out.println("Minute : " + cal.get(Calendar.MINUTE));
      System.out.println("Second : " + cal.get(Calendar.SECOND));
      System.out.println();
  
      <span class="code-comment">// Manipulating Dates</span>
      Calendar calTemp;
      calTemp = (Calendar) cal.clone();
      calTemp.add(Calendar.DAY_OF_YEAR, -365);
      System.out.println("365 days ago, it was: " + calTemp.getTime());

      calTemp = (Calendar) cal.clone();
      calTemp.add(Calendar.HOUR_OF_DAY, 11);
      System.out.println("After 11 hours, it will be: " + calTemp.getTime());

      <span class="code-comment">// Roll</span>
      calTemp = (Calendar) cal.clone();
      calTemp.roll(Calendar.HOUR_OF_DAY, 11);
      System.out.println("Roll 11 hours, it will be: " + calTemp.getTime());
      System.out.println();
   }
}</pre>

<h4>java.util.GregorianCalendar</h4>

<p>The calendar that we use today, called <em>Gregorian calendar</em>, came into effect in October 15, 1582 in some countries and later in other countries. It replaces the <em>Julian calendar</em>.
 10 days were removed from the calendar, i.e., October 4, 1582 (Julian) 
was followed by October 15, 1582   (Gregorian). The only difference 
between the Gregorian   and the Julian calendar is the "leap-year rule".
 In Julian calendar, every four years is a leap year. In Gregorian 
calendar, a leap year is a year that is divisible by 4 but not divisible
 by 100, or it is divisible by 400, i.e., the Gregorian calendar omits  
 century   years which are not divisible by 400 (removing 3 leap years 
(or 3 days) for every 400 years). Furthermore, Julian calendar considers
 the first day of the year as march 25th, instead of January 1st.</p>

<p><code>java.util.Calendar</code> is an abstract class. <code>Calendar.getInstance()</code> returns an implementation class <code>java.util.GregorianCalendar</code> (except locales of "<code>th</code>" and "<code>jp</code>"). In Java, this <code>GregorianCalendar</code> handles both the Gregorian calendar as well as the Julian calendar, including the cut over.</p>

<p><code>GregorianCalendar</code> has the following constructors:</p>
<ul>
<li><code>GregorianCalendar()</code>: using the current time, with the default time zone and locale.</li>
<li><code>GregorianCalendar(int year, int month, int dayOfMonth)</code>: with the default time zone and locale.</li>
<li><code>GregorianCalendar(int year, int month, int dayOfMonth, int hourOfDay, int minute, int second)</code></li>
<li><code>GregorianCalendar(TimeZone zone, Locale aLocale)</code>: using current time.</li>
<li><code>GregorianCalendar(TimeZone zone)</code></li>
<li><code>GregorianCalendar(Locale aLocale)</code></li>
</ul>

<p>For example,</p>
<pre class="code-listing">Calendar cal1 = new GregorianCalendar();  <span class="code-comment">// allocate an instance and upcast to Calendar</span>
Calendar cal2 = new GregorianCalendar(2010, 9, 26);  <span class="code-comment">// allocate with the specified date</span>
cal2.get(Calendar.DAY_OF_WEEK);                      <span class="code-comment">// 1 (Sunday) to 7 (Saturday)</span></pre>

<h3>java.text.DateFormat &amp; java.text.SimpleDateFormat</h3>
<p>Read Java Tutorial, Internationalization ⇒ Formatting ⇒ Dates and Times at <a href="http://java.sun.com/docs/books/tutorial/i18n/format/dateintro.html" wrc_done="true">http://java.sun.com/docs/books/tutorial/i18n/format/dateintro.html</a><span class="wrc1 wrc_icon wrc_injected"></span>.</p>
<p><code>java.text.DateFormat</code> is an abstract class for formats 
(from date to text) and parses (from text to date) date/time in a 
text-language-independent manner.   <code>SimpleDateFormat</code> is an implementation subclass. Date formatter operates on <code>Date</code> object.</p>
<p>To use the date formatter, first create a <code>DateFormat</code> object for the desired date/time format, and then use the <code>format()</code> method to produce a date/time string.</p>

<p>To use the <code>DateFormat</code>, use one of these static factory method to create an instance:</p>
<ul>
<li><code>DateFormat.getDateTimeInstance()</code>: use the default style and locale to format date and time.</li>
<li><code>DateFormat.getDateTimeInstance(int dateStyle, int timeStyle, Locale aLocale)</code>: style includes <code>DateFormat.FULL</code>, <code>LONG</code>, <code>MEDIUM</code>, and <code>SHORT</code>.</li>
<li><code>DateFormat.getInstance()</code>: uses <code>SHORT</code> style for date and time.</li>
<li><code>DateFormat.getDateInstance()</code>, <code>DateFormat.getDateInstance(int style, Locale aLocale)</code>: date only.</li>
<li><code>DateFormat.getTimeInstance()</code>, <code>DateFormat.getTimeInstance(int style, Locale aLocale)</code>: time only.</li>
</ul>

<p>To parse a text string int <code>Date</code>, use:</p>
<pre class="code-listing">DateFormat formatter = ....
Date myDate = formatter.parse(myString);</pre>

<p><strong>EXAMPLE:</strong></p>


<pre class="code-listing">import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Locale;
   
public class <strong>DateFormatTest</strong> {
   
   public static void main(String[] args) {
      Date now = new Date();
   
      <span class="code-comment">// Use Date.toString()</span>
      System.out.println(now);
   
      <span class="code-comment">// Use DateFormat</span>
      DateFormat formatter = DateFormat.getInstance(); <span class="code-comment">// Date and time</span>
      String dateStr = formatter.format(now);
      System.out.println(dateStr);
      formatter = DateFormat.getTimeInstance();        <span class="code-comment">// time only</span>
      System.out.println(formatter.format(now));
  
      <span class="code-comment">// Use locale</span>
      formatter = DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL, Locale.FRANCE);
      System.out.println(formatter.format(now));
  
      <span class="code-comment">// Use SimpleDateFormat</span>
      SimpleDateFormat simpleFormatter = new SimpleDateFormat("E yyyy.MM.dd 'at' hh:mm:ss a zzz");
      System.out.println(simpleFormatter.format(now));
   }
}</pre>
<pre class="code-output">Sun May 16 19:38:41 SGT 2010
5/16/10 7:38 PM
7:38:41 PM
dimanche 16 mai 2010 19 h 38 SGT
Sun 2010.05.16 at 07:38:41 PM SGT</pre>


<h4>Measuring Time</h4>

<p>Many applications (such as games and animation) require good timing control.</p>
<p> Java provides these <code>static</code> methods in <code>System</code> class:</p>

<p><code><strong>System.currentTimeMillis()</strong></code><strong>: </strong>Returns the current time in milliseconds since January 1, 1970 00:00:00 GMT (known as "epoch"), in <code>long</code>.</p>

<pre class="code-listing"><span class="code-comment">// Measuring elapsed time</span>
long startTime = System.currentTimeMillis();
<span class="code-comment">// The code being measured
</span>  .......
long estimatedTime = System.currentTimeMillis() - startTime;</pre>

<p><code><strong>System.nanoTime()</strong></code><strong>:</strong> Returns the current value of the most precise available system timer, in nanoseconds, in <code>long</code>. Introduced in JDK 1.5. <code>nanoTime()</code> is meant for measuring relative time interval instead of providing absolute timing.</p>

<pre class="code-listing"><span class="code-comment">// Measuring elapsed time</span>
long startTime = System.nanoTime();
<span class="code-comment">// The code being measured
</span>  .......
long estimatedTime = System.nanoTime() - startTime;</pre>

<p>Take note that milli is 10<sup>-3</sup>=0.001, nano is 10<sup>-9</sup>=0.000000001. There is no micro (10<sup>-6</sup>=0.000001) timer.</p>


<p>&nbsp;</p>


<p>&nbsp;</p>
<h4>REFERENCES &amp; RESOURCES</h4>
<ul>
<li>Java Tutorial, Internationalization ⇒ Formatting ⇒ Dates and Times at <a href="http://java.sun.com/docs/books/tutorial/i18n/format/dateintro.html" wrc_done="true">http://java.sun.com/docs/books/tutorial/i18n/format/dateintro.html</a><span class="wrc1 wrc_icon wrc_injected"></span>.</li>
<li>JDK source codes: <code>java.util.Date</code>, <code>java.util.Calendar</code>, <code>java.util.GregorianCalendar</code>.</li>
</ul>

<p class="p-last-modified">Latest version tested: JDK 1.6<br>
Last modified: September, 2010</p>

</div>  <!-- End the content division -->

<!-- print footer -->
<script type="text/javascript" src="Java%20programming%20tutorial%20%20Date,%20Time%20and%20Calendar_files/footer.js"></script><div id="footer">
<p>Feedback, comments, corrections, and errata can be sent to Chua Hock-Chuan (ehchua@ntu.edu.sg) &nbsp;&nbsp;|&nbsp;&nbsp; <a href="http://www.ntu.edu.sg/home/ehchua/programming/index.html">HOME</a>
</p></div>

</div>  <!-- End the container division -->


</body></html>