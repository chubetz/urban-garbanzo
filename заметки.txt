Как работать с HSQL

Положить JDBC-драйвер в Tomcat - можно через Netbeans (Servers - Apache.. - Sources - добавить hsqldb.jar)
И в проект надо положить


runserver.bat --help - список доступных аргументов

новая БД:
runserver.bat --database.0 file:C:\JAVA\hsql\test1 --dbname.0 test1

Подключение:
runmanager.bat

Type: HSQL Database Engine Server
Driver: org.hsqldb.jdbcDriver
jdbc:hsqldb:hsql://localhost/test1


https://www.tutorialspoint.com/jdbc/jdbc-sample-code.htm
https://www.tutorialspoint.com/jdbc/jdbc-statements.htm
https://www.tutorialspoint.com/jdbc/preparestatement-object-example.htm

http://hsqldb.org/doc/guide/guide.html 

Servlet cookbook

=====
дома:

!- добиться работоспособности. 1) напечатать строку INSERT... - готово
2) положить в questionMap
3) Формочка "Список вопросов": загрузка questionMap из БД - готово
3.5) добавить тип и текст в вопрос, убедиться, что пишется в БД и читается нормально. Доработать вывод списка - готово
3) убедиться что записи в БД и в объектах идентичны - не надо

3.5) Постараться записывать и читать из БД Кириллицу - готово

4) сделать сущность Answer, доработать форму создания вопроса
	4.1 Сделать форму с четырьмя ответами - готово
	4.2 Сохранять вопрос вместе с ответами - готово

	4.3 Отображать ответы.
		1) проверить, чтобы ответы подгружались при старте - готово
		2) чтобы подгружались после сохранения - готово
		2.5) если невалидный -ссобщение красным 
		3) в questionMap - только вопросы с ответами, валидные - не надо
		4) сделан метод getValidQuestionMap
		



5) сделать форму редактирования вопроса (с учетом уже имеющихся ответов! - всех, в том числе невалидных) и функционал сохранения в БД
	5.1) Кнопочка редактирования - сделано
	5.2) Форма редактирования
		5.2.1) подтянуть в форму имеющиеся данные - сделано
		5.2.2) реализовать обновление данных в БД - остановился на на
			JDBCUtils.saveEntity в блоке update, закомментировал saveAnswers в Question.saveQuestion.
			Проверить, какой SQL-запрос получается! Убедиться, что вопрос сохраняется. - готово
			Доделать обновление/удаление ответов - готово.
			
	5.3) Перевести добавление на новую форму редактирования - готово
	5.4) удалить вопрос целиком. Заблокировать опцию, если создается новый вопрос. - пока не надо
	5.5) ответ удаляется, если введен пустой - пока не надо

6) выгрузка/загрузка ответов
	6.1) генерация скрипта наката из системы в виде файла UTF-8
	6.2) доделать выгрузку для ответов - сделано
	6.3) проверить, что накат работает - сделано

	6.3.1) Перед выгрузкой перезакачивать из БД - на всякий случай! - сделано

	6.4) поместить скрипт в гит - сделано

7) Realm - вынос в БД
	7.0) универсальная работа со state - готово
	7.1) класс Realm, его состояние - готово
	7.11) static getRealmMap(), объектовый getQuestionMap()
	7.12) вынос метода init() в класс Storage в пакете edu, заполнение мапов, проверка
	7.13) init-методы - default access, кроме Storage.init
	!!! тотальная переделка методов Question и ANswer под новый init(). Проверка, что все работает. realm пока не внедряем - готово
	далее - имплементировать новый state во всех сущностях !! - готово
	7.2) хранение в БД. ID, Метка, описание
		7.2.1) редактирование/создание Realm, заведение с интерфейса имеющихся областей
		7.2.2) переделка скрипта Question. Вместо текстового поля realm - числовое поле realmid, накат этого скрипта
		7.2.3) переделка атрибута Question.realm на int, добавление метода getRealmId(), метод getRealm должен возвращать объект Realm
		7.2.4) в Answer - добавить метод getQuestion(), возвращающий Question
	7.25) добавление в init() загрузку данных по Realm	
	7.3) метод Question.toString, выводы в JSP
	7.4) доступ к областям в JSP - напрямую из Realm
	7.5) выгрузка/загрузка SQL
	7.6) переделка на новый state сущностей Question и Answer
	7.7) Сделать родительский неинстанциируемый класс Entity и вынести в него общие методы сущностей - сделано частично
	7.8) 

8) что-то похожее с Theme < Realm + реализация связи многие-ко-многим: Theme <-> Question



9) Сделать сущность Theme, чтоьбы привязывать вопросы

10) Сделать Answer внутренним классом Question!! Переработать static clause в Question

11) Сделать MockQuestion внутренним классом

12) Сделать MockAnswer?

4.9) Сделать утилиту поиска элемента в коллекции/массиве

*) основной сервлет должен работать только через post

*) что-нибудь придумать с getQuestionMap, чтобы не обрабатывать JDBCException в контекстах, где это не требуется

*) когда-нибудь уйти от строго 4-х ответов

*) вынести на константы весь строковый хардкод

*) интересно, есть ли в Java массивы/хеши с дефолтными значениями?

-попробовать положить данные в таблицу //готово
-красиво оформить new2.java
-пройти еще одну главу по сервлетам
-вынести код работы с БД из сервлета
-подумать, как хранить и реплицировать данные
___> генерировать объекты по ResultSet

-форма редактирования вопроса

-начать подтотовку к сертификации, попутно расширять механизм вопросов

- схема взаимодействия с БД: вопросы заводятся с интерфейса, редактируются с интерфейса,
скрипт наката выгружается в проекте, заливается напрямую через БД
проследить за целостностью идентификаторов!

-интересная задачка: универсальная печать многомерных массивов

- JDBC иерархическая подгрузка сущностей

- JDBC каскадное удаление




-- hashCode для Question

Можно ли запускать код Ruby в Java-проекте?

#Eckel on Java 8
#Bloch effective Java

вопросное конспектирование книг

изначальное написание книг в вопросном формате


Maven

-- надо ли закрывать ResultSet обязательно?


Сайт, где кажды может создать себе систему подготовки!




DROP TABLE Question IF EXISTS

CREATE TABLE Question (id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY, realm VARCHAR(20), type int, text VARCHAR(2000))

INSERT INTO Question VALUES 



DROP TABLE Answer IF EXISTS

CREATE TABLE Answer (id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY, questionId int, correct boolean, text VARCHAR(2000))


DROP TABLE Realm IF EXISTS;

CREATE TABLE Realm (id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY, text VARCHAR(20), description VARCHAR(2000))





============= поразмыслить 
<?> and <? extends Object> are synonymous, as you'd expect, but there are a few cases with generics where extends Object is not actually redundant. For example, <T extends Object & Foo> will cause T to become Object under erasure, whereas with <T extends Foo> it will become Foo under erasure. (This can matter if you're trying to retain compatibility with a pre-generics API that used Object.)

(Source: http://download.oracle.com/javase/tutorial/extra/generics/convert.html; it explains why the JDK's java.util.Collections class has a method with this signature:

public static <T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll






Кириллица:
https://stackoverflow.com/questions/932559/encoding-problems-in-jsp

http://yan.zlobin.name/86

    <Connector port="8081" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" URIEncoding="UTF-8"/>

        request.setCharacterEncoding ("UTF-8"); - в сервлете



научиться разрабатывать от тестов

Calendar!

JUnit?


Идеи
====

Сервис: Человек сам составляет для себя вопросы!

- возможность подключить к аккаунту электронную книгу

- флеш-карточки - красивый вывод => хранить форматирование

- изображения в вопросах - чтобы нельзя было скопировать в IDE и проверить

- вопрос-задача? продумать


Java Certification
==================

Exam Number: 1Z0-808
Exam Title: Java SE 8 Programmer I


Список ошибок: https://www.selikoff.net/java-oca-8-programmer-i-study-guide/

p.1
Java Building Blocks

