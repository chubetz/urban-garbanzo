Как работать с HSQL

Положить JDBC-драйвер в Tomcat - можно через Netbeans (Servers - Apache.. - Sources - добавить hsqldb.jar)
И в проект надо положить


Tomcat:
Ups. Seems like this is not a bug. For Tomcat you have to set allowCasualMultipartParsing to true to get it to work correctly.

From the docs:

    Set to true if Tomcat should automatically parse multipart/form-data request bodies when HttpServletRequest.getPart* or HttpServletRequest.getParameter* is called, even when the target servlet isn't marked with the @MultipartConfig annotation (See Servlet Specification 3.0, Section 3.2 for details). Note that any setting other than false causes Tomcat to behave in a way that is not technically spec-compliant. The default is false

(https://docs.oracle.com/javaee/6/tutorial/doc/gmhal.html)

Загрузхка файлов:
https://stackoverflow.com/questions/18664579/recommended-way-to-save-uploaded-files-in-a-servlet-application



runserver.bat --help - список доступных аргументов

новая БД:
runserver.bat --database.0 file:C:\JAVA\hsql\test1 --dbname.0 test1

Подключение:
runmanager.bat

Type: HSQL Database Engine Server
Driver: org.hsqldb.jdbcDriver
jdbc:hsqldb:hsql://localhost/test1


https://www.tutorialspoint.com/jdbc/jdbc-sample-code.htm
https://www.tutorialspoint.com/jdbc/jdbc-statements.htm
https://www.tutorialspoint.com/jdbc/preparestatement-object-example.htm

http://hsqldb.org/doc/guide/guide.html 


TinyMCE

добавить tinymce в Web Pages

http://r-band.ru/how-to/ustanovka-i-nastroyka-tinymce-inicializaciya-i-parametry-redaktora.html



Загрузка файлов 
https://stackoverflow.com/questions/2422468/how-to-upload-files-to-server-using-jsp-servlet



Настройка DDNS:
1) Устновить DUC c no-ip
2) В настройках GPON МГТС
	1) настроить DDNS
	2) Настроить NAT - адресовать порт 8080 на локальный ip
3) включить DUC (а можно, наверное, и не включать)


суперадминские логин/пароль GPON RV6699 - mgts/mtsoao

Пора бы уже давно знать, какие порты МГТС блокирует со своей стороны

25
135-139, 445
21, 23, 69, 80, 8080, 254, 255, 161
135-139
69, 161




Планы по Java
=============

научиться разрабатывать от тестов

Calendar!

JUnit?

Javadoc

Servlet cookbook

https://www.amazon.com/Iron-Clad-Java-Building-Secure-Applications/dp/0071835881
https://www.amazon.com/Java-Security-Writing-Deploying-Applications-ebook/dp/B00DDZPC8Y/ref=sr_1_10?s=books&ie=UTF8&qid=1530394244&sr=1-10&keywords=java+secure
ключевые слова - Java Secure


Effective Java

Java Concurrency in practice (Goetz)

Maven

Spring

Логирование

JDBC

Apache Commons

Spring



=====
дома:

!- добиться работоспособности. 1) напечатать строку INSERT... - готово
2) положить в questionMap
3) Формочка "Список вопросов": загрузка questionMap из БД - готово
3.5) добавить тип и текст в вопрос, убедиться, что пишется в БД и читается нормально. Доработать вывод списка - готово
3) убедиться что записи в БД и в объектах идентичны - не надо

3.5) Постараться записывать и читать из БД Кириллицу - готово

4) сделать сущность Answer, доработать форму создания вопроса
	4.1 Сделать форму с четырьмя ответами - готово
	4.2 Сохранять вопрос вместе с ответами - готово

	4.3 Отображать ответы.
		1) проверить, чтобы ответы подгружались при старте - готово
		2) чтобы подгружались после сохранения - готово
		2.5) если невалидный -ссобщение красным 
		3) в questionMap - только вопросы с ответами, валидные - не надо
		4) сделан метод getValidQuestionMap
		



5) сделать форму редактирования вопроса (с учетом уже имеющихся ответов! - всех, в том числе невалидных) и функционал сохранения в БД
	5.1) Кнопочка редактирования - сделано
	5.2) Форма редактирования
		5.2.1) подтянуть в форму имеющиеся данные - сделано
		5.2.2) реализовать обновление данных в БД - остановился на на
			JDBCUtils.saveEntity в блоке update, закомментировал saveAnswers в Question.saveQuestion.
			Проверить, какой SQL-запрос получается! Убедиться, что вопрос сохраняется. - готово
			Доделать обновление/удаление ответов - готово.
			
	5.3) Перевести добавление на новую форму редактирования - готово
	5.4) удалить вопрос целиком. Заблокировать опцию, если создается новый вопрос. - пока не надо
	5.5) ответ удаляется, если введен пустой - пока не надо

6) выгрузка/загрузка ответов
	6.1) генерация скрипта наката из системы в виде файла UTF-8
	6.2) доделать выгрузку для ответов - сделано
	6.3) проверить, что накат работает - сделано

	6.3.1) Перед выгрузкой перезакачивать из БД - на всякий случай! - сделано

	6.4) поместить скрипт в гит - сделано

7) Realm - вынос в БД
	7.0) универсальная работа со state - готово
	7.1) класс Realm, его состояние - готово
	7.11) static getRealmMap(), объектовый getQuestionMap()
	7.12) вынос метода init() в класс Storage в пакете edu, заполнение мапов, проверка
	7.13) init-методы - default access, кроме Storage.init
	!!! тотальная переделка методов Question и ANswer под новый init(). Проверка, что все работает. realm пока не внедряем - готово
	далее - имплементировать новый state во всех сущностях !! - готово
	7.2) хранение в БД. ID, Метка, описание
		7.2.1) редактирование/создание Realm, заведение с интерфейса имеющихся областей
			1) окно редактирования области.... - готово
			2) считывание областей из БД, заполнение из static перенести в скрипт - готово
			3) сохранение области, окошко с результатами - готово
			4) создание области, окошко с результатами - готово
			5) выгрузка областей в скрипт - готово 
		7.2.2) переделка скрипта Question. Вместо текстового поля realm - числовое поле realmid, накат этого скрипта - готово!
		7.2.3) переделка атрибута Question.realm на int, добавление метода getRealmId(), метод getRealm должен возвращать объект Realm - готово!
		7.2.4) в Answer - добавить метод getQuestion(), возвращающий Question - а надо ли?
	7.25) добавление в init() загрузку данных по Realm - готово	
	7.3) метод Question.toString, выводы в JSP - готово
	7.4) доступ к областям в JSP - напрямую из Realm? - не надо
	7.5) выгрузка/загрузка SQL -готово
	7.6) переделка на новый state сущностей Question и Answer - готово
	7.7) Сделать родительский неинстанциируемый класс Entity и вынести в него общие методы сущностей - сделано


8) что-то похожее с Theme < Realm 
	1) Theme < Realm, сделать сущность. id, realmId, text, number (float)
	2) скрипт, создающий таблицу. Инициализация
	2.5) список тем
	3) форма редактирования, страница результатов
	4) создание темы
	5) редактирование темы
	6) выгрузка в SQL

9) + реализация связи многие-ко-многим: Theme <-> Question
	Предварительная переработка! Механизм PRIMARY KEY в сущностях
		0) добавить в интерфейс DBEntity методы getPrimaryKey и setPrimaryKey - готово
		1) класс Entity - добавить поддержку primaryKey (аналогично state), 
добавить методы вида getPKStr; убрать все ссылки на id - готово
		2) переделать все Entity-классы, чтобы не было ошибок (долго!) - готово
		2.5) JDBCUtils.loadEntitiesData. Storage.init() - готово
		3) переделать JDBCUtils. Если запись не удалась - возвращать pk=null - готово
		4) переделать все методы сохранения в Entity-классах - гттово
		5) тотальное тестирование: составить план тестирования. Сходу, естественно, не заработало!
			План.
			1) Проверить все списки.
			2) 	Отредактировать область.
				Проверить список
				Убедиться, что вопрос подхватил.
				Убедиться, что Тема подхватила.
			3) 	Добавить область.
				Проверить список
				Отредактировать вопрос, проставив новую область.
				Отредактировать тему, проставив новую область.
				Убедиться, что подхватилось.
				Сделать init(), проверить список областей и вопросы
			4) 	Отредактировать тему.
				Добавить тему.
				Проверить список.
				Сделать init()
				Проверить список.
			5) 	отредактировать вопрос: Поменять текст, ответы, корректные ответы, комментарии
				Отредактировать другой вопрос, удалить ответы
				Добавить вопрос заведомо некорректный.
				Просмотреть список
				Исправить вопрос
				Просмотреть список
				Сделать init()
				Проверить вопросы
			6) 	ThemeQUestion:
				Задать несколько тем вопросу.
				Убедиться, что отображается и выгружается и отображается
				Задать другие темы вопросу
				Убедиться, что отображается и выгружается и отображается
				Удалить все темы у вопросы
				Убедиться, что отображается и выгружается и отображается
				Перенести вопрос с темами в другую область. ДОлжны удалиться темы
				Убедиться, что отображается и выгружается и отображается
			7)	Перенос темы в другую область:
				Создать (или отредактировать) две темы в области
				добавить две темы в один вопрос, одну тему в другой.
				Перенести общую тему в другую область
				Убедиться, что вопросы пропали из темы (список вопросов, список тем)
				init(), еще раз убедиться
	
		x) выгрузка DROP/CREATE Table единым блоком - готово
	1) Сущность ThemeQuestion: только PK questionId-themeId
	2) getThemeMap() в Question, getQuestionMap() в Theme - готово
	5) в списке областей - отображать темы - готово
	55) всплывающее окно с привязкой темы
	3) в редактировании вопроса - привязывать темы
	4) linkQuestionTheme, unlinkQuestionTheme - сохранение в БД/стирание из БД
		1) link - гттово
		2) unlink - гттово
		3) unlink All для выбранного вопроса перед link - гттово
	4) использование этих методов - гттово


	4) в редактировании темы - отображать вопросы -  мелким шрифтом
	4) в редактировании вопроса - отображать темы 

	7) сохранение в БД
	8) проверить загрузку из БД - особенно в части связей тем и вопросов
	9) выгрузка в SQL

10) Повторное редактирование вопроса (чтобы можно было вернуться со страницы new_question) - готово
	Две кнопки:
	1) вернуться к редактированию
	2) вернуться к списку


11) Глобальная переработка. Реализация методов Storage.register, unregister, registerLink, unregisterLink
	1) сделано

12) Список вопросов - по области
	1) отображение вопросов по области (параметр realmId) - готово
	2) из списка областей - вопросы - готово

13) реализовать хедер
	1) переписать на JSP сервлет GenerateHTML, переименовать в Viewer - готово
	2) добавить хедер - готово

14) подсчет загруженных сущностей - готово

15) кнопки перехода в итоговых окнах областей и тем - готово

16) добавление вопросов по одному
	0) убрать кейс add_question, оставить только update_question - готово
	1) javascriptом отправлять action add_answer и перерисовывать страницу с новым ответом. Опираться
	на имеющиеся ответы (с идентификаторами -1, -2 и т.д.)
	сделал добавление ответов. Далее:
		1) соответствующая отрисовка corrects - готово
		2) добавление ответов в режиме редактирования имеющихся вопросов - готово
		3) проверить, что пустые ответы не сохраняются и/или удаляются - как из памяти, так и из БД - готово
		4) отображение произвольного числа ответов в списке - готово
			
	..
	

	
	) если все хорошо - заменить методы2 на методы - везде - готово
	) вынести String[] corrects из цикла - готово
	) пройти тесты по вопросам - готово
	) убедиться, что более 4 ответов корректно сохраняются и считываются - готово
	) проверить, что творится в БД - готово


17) реализация комментариев к ответу
	1) добавить поле comment
		1) в скрипт заметок - готово
		2) в export - ГОТОВО
		3) в defaultState - готово
		4) проапдейтить БД - готово
		4) выгрузить questions.sql - готово
	2) добавить возможность редактирования комментариев на страницу - готово


		) полное тестирование после чистого наката - готово

18) сущность Image
	1) добавить класс Image:
		3) в скрипт заметок
		1) defaultState
		5) в storage
		2) getMap
		4) в скрипт export
	2) реализовать загрузку картинок
		1) прочитать ByteArrayInputStream, положить файл в папку images с именем <id> и без расширения
		2) придумать, как хранить картинки на сервере, в проекте, в репозитории - готово
		3) создать объект Image и положить его в БД и в память - готово
	3) добавить просмотр картинок во Viewer - готово
	

		



-------



15) новая сущность Chapter, ссылающаяся на тему: id int, themeId int, number double, title char(2000), text char(10000)

	связка ImageRealm: int imageId, int realmId (composite key)
	связка ImageChapter: int imageId, int chapterId (composite key), description char(100)

Сделать редактор глав - с рисунками

реализовать удаление картинок
	4) удаление картинок (метод delete(), unregister(),...)
		1) стирание, если было IOException



9) новый тип info вопроса - Code Snippet ? 

7) все getStr и т.д. поменять на методы в классах

6) реализовать удаление связи вопроса и темы при необходимости - ПОТОМ!
	перепривязка тем и вопросов при редактировании вопроса


9) Сделать сущность Theme, чтоьбы привязывать вопросы

10) Сделать Answer внутренним классом Question!! Переработать static clause в Question

11) Сделать MockQuestion внутренним классом

12) Сделать MockAnswer?

4.9) Сделать утилиту поиска элемента в коллекции/массиве

*) обязательно оптимизировать загрузку изображений, когда дойду до стримов!!

*) настроить в сервлете защиту от неверных файлов (напр., без расширения)

*) у каждого пользователя должна быть своя папка с файлами (или как-то еще это разруливать)

*) сделать экспорт пользовательской БД

*) выводить информацию обо всех ошибках, а не только об ошибках БД

*) Очень долго работает перенос темы в другую область, если в теме куча вопросов!

*) нельзя позволить посредством махинаций с html позволить пользователю модифицировать чужие вопросы

*) репликация базы и выборщик

*) фоновая проверка целостности БД

*) вынести блок с corrects в единый метод и сослаться из saveAnswers и MockQuestion. Или вообще переарботать.

*) разобраться, чем PreparedStatement (conn.prepareStatement) лучше conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

*) простые кнопки обрабатывать Javascriptoм, а не формами


*) реализовать для всех сущностей методы save и delete на уровне package. Элиминировать статичные методы сохранения
в методах save и delete работать и с памятью, и с БД. запретить save и delete для сущностей с отрицательными id (?)
Не факт, что надо делать save и delete у вопросов - во всяком случае, до того момента, как они будут составлять единое целое с ответами. Хотя... можно изготавливать вопросы по data, внутри них - ответы по data, и все сохранять


*) реализовать хранение предыдущих значений полей?

*) может быть, обойтись без unregister, если сущность переносится в другого родителя?

*) на продакшене - если ошибка с БД, то повторная инициализация

*) в случае смены области вопроса - сносить темы!

*) добавить удобные методы - getField() вместо getSrt("field"), заменеить, где надо

*) запрет возврата кнопкой "назад" - чтобы нельзя было дважды один и тот же новый вопрос создать

*) вынести в CSS все style

*) все-таки постепенно делать более удобный интерфейс, с кнопками перехода, а не с клавишей "назад"

*) возможность пометить вопрос как ненужный для конкретного пользователя

*) работа с "предварительными" темами

*) возможность иерархии тем

*) возможность оставлять комментарии к вопросу

*) конкукрентные хеши! есть риск одновлеменного доступа

*) removeIf в сете

*) новый тип вопроса - расширенный информационный - для обучения - с порядковым номером!
их надо показывать все и подряд!

*) save-методы сделать объектовыми?

*) удалять из БД orphan-сущности (ThemeQuestion предположительно)

*) как-то гарантировать запись в БД?

*) темы при смене области меняются на лету

*) мапы в storage переделать на дженерики?

*) синхронизация обращений к storage, а также init()

*) интернационализация когда-нибудь

*) вообще JDBCUstils стоило бы переделать - особеннов части result в saveEntity и исключений

*) не хватает универсализма в алгоритме вставки новых сущностей - хардкод и завязка на MAX(ID) для isPkAuto = true;
и если PK не авто - берется из вставляемой сущности, а надо бы брать строго из того, что записалось в базу. ВАЖНО!

*) в Entity-фреймворке пока не поддерживаются даты

*) сделать LoadedEntity внутренним классом JDBCUtils

*) обеспечить безопасное заполнение state и primaryKey - как в конструкторе Entity

*) форматирование текстов вопросов - прикрутить внешний модуль

*) иерархическое сохранение в  БД

*) основной сервлет должен работать только через post

*) что-нибудь придумать с getQuestionMap, чтобы не обрабатывать JDBCException в контекстах, где это не требуется

*) когда-нибудь уйти от строго 4-х ответов

*) вынести на константы весь строковый хардкод

*) интересно, есть ли в Java массивы/хеши с дефолтными значениями?

*) проверять валидность Map<String, ?> data при создании сущностей

*) подумать на генерализацией повторяющихся методов с помощью ClassName.class

**) отимизировать блок export в основном сервлете - избавиться от code duplicate

*) валидатор ввода числовой информации

*) вопросы-картинки (хранятся в binary)

*) научиться работать со списками данных

-попробовать положить данные в таблицу //готово
-красиво оформить new2.java
-пройти еще одну главу по сервлетам
-вынести код работы с БД из сервлета
-подумать, как хранить и реплицировать данные
___> генерировать объекты по ResultSet

-форма редактирования вопроса

-начать подтотовку к сертификации, попутно расширять механизм вопросов

- схема взаимодействия с БД: вопросы заводятся с интерфейса, редактируются с интерфейса,
скрипт наката выгружается в проекте, заливается напрямую через БД
проследить за целостностью идентификаторов!

-интересная задачка: универсальная печать многомерных массивов

- JDBC иерархическая подгрузка сущностей

- JDBC каскадное удаление




-- hashCode для Question

Можно ли запускать код Ruby в Java-проекте?

#Eckel on Java 8
#Bloch effective Java

вопросное конспектирование книг

изначальное написание книг в вопросном формате


Maven

-- надо ли закрывать ResultSet обязательно?


Сайт, где кажды может создать себе систему подготовки!




DROP TABLE Question IF EXISTS

CREATE TABLE Question (id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY, realm VARCHAR(20), type int, text VARCHAR(2000))

INSERT INTO Question VALUES 



DROP TABLE Answer IF EXISTS

CREATE TABLE Answer (id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY, questionId int, correct boolean, text VARCHAR(2000), comment VARCHAR(2000))


DROP TABLE Realm IF EXISTS;

CREATE TABLE Realm (id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY, text VARCHAR(20), description VARCHAR(2000))


DROP TABLE Theme IF EXISTS;
CREATE TABLE Theme (id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY, realmId int, text VARCHAR(2000), number DOUBLE);

DROP TABLE ThemeQuestion IF EXISTS;
CREATE TABLE ThemeQuestion (themeId int, questionId int, PRIMARY KEY(themeId, questionId));

DROP TABLE Image IF EXISTS;
CREATE TABLE Image (id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY, filename VARCHAR(2000), extension VARCHAR(10));

) сущность Image: id int, filename varchar(100), extension varchar(10)


============= поразмыслить 
<?> and <? extends Object> are synonymous, as you'd expect, but there are a few cases with generics where extends Object is not actually redundant. For example, <T extends Object & Foo> will cause T to become Object under erasure, whereas with <T extends Foo> it will become Foo under erasure. (This can matter if you're trying to retain compatibility with a pre-generics API that used Object.)

(Source: http://download.oracle.com/javase/tutorial/extra/generics/convert.html; it explains why the JDK's java.util.Collections class has a method with this signature:

public static <T extends Object & Comparable<? super T>> T max(Collection<? extends T> coll






Кириллица:
https://stackoverflow.com/questions/932559/encoding-problems-in-jsp

http://yan.zlobin.name/86

    <Connector port="8081" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" URIEncoding="UTF-8"/>

        request.setCharacterEncoding ("UTF-8"); - в сервлете





Идеи
===

!!!главная - изучить и не забыть. Человек либо обучает себя сам, либо его ведет преподаватель.



Сервис: Человек сам составляет для себя вопросы!

- возможность подключить к аккаунту электронную книгу

- флеш-карточки - красивый вывод => хранить форматирование

- изображения в вопросах - чтобы нельзя было скопировать в IDE и проверить

- вопрос-задача? продумать

- схема обучения: обучающие карточки предоставляются ученику заранее, вопросы по ним составляет он сам

- вопросы-тесты с произвольным числом правильных и неправильных ответов - каждый раз генерится новый набор ответов!

- экспорт-импорт своей базы знаний&вопросов

- пользователь сам вносит в систему задачи и ответы. Могут быть и предзаданные.

- мнозоязычность

- возможность клонировать курс к себе в аккаунт с возможностью правки

- проверка знаний с подсчетом времени

- возможность пометить вопрос как ненужный

- комментарии к ответу!

- в перспективе - standalone-client, а также standalone-приложение

- поиск по сущностям

- генерация единого документа из Chapters

- возможность редактирования данных в табличном виде


Вопросы для меня:
что будет, если использовать try без catch?



Java Certification
==================

Exam Number: 1Z0-808
Exam Title: Java SE 8 Programmer I


Список ошибок: https://www.selikoff.net/java-oca-8-programmer-i-study-guide/

p.22
Another way to specify numbers is to change the “base.”
======
собирать задачки в интернете. 
======
