Theme::Введение
Question::COMMON_TYPE
Text::
Перечислите основные принципы идеального ORM-решения.
Answer::
<p><em>- Объекты, а не таблицы</em>. Приложение должно использовать свою модель классов, а не реляционную модель с табличной спецификой.</p>
<p>- <em>Удобство, а не невежество</em>. Для разработки нужно иметь представление о реляционной технологии, но при этом не нужно писать огромное количество вспомогательного кода.</p>
<p><em>- Ненавязчивость, а не прозрачность</em>. Долговременное хранение объектов и жизненный цикл сущностей не могут быть невидимыми для приложения, однако контроль над ситуацией не должен выдвигать строгих требований, вроде необходимости для объектов наследовать классам или реализовывать интерфейсы, чтобы быть хранимыми.</p>
<p><em>- Имеющиеся данные, новые объекты. </em>Возможно, приложение будет использовать уже имеющуюся реляционную модель конкретной БД, а не создавать собственную.</p>
<p><em>- Достаточно, но не слишком</em>. Не нужно стремиться предоставить решение, которое решит абсолютно все возможные проблемы (многие из которых проблемами не являются), заплатив за это огромным оверхедом и сложностью использования.</p>
<p><em>- Локальные, но мобильные</em>. Персистентное хранение не должно включать в себя обязательную распределенность объектов, однако сущности должны иметь способность к путешествию, если этого потребует архитектура системы.</p>
<p>- <em>Стандартный API, подключаемые реализации</em>. Приложение должно иметь возможность легко переключаться между библиотеками от разных поставщиков.</p>
<p>&nbsp;</p>
Question::COMMON_TYPE
Text::
<p>Что такое <em>Impedance Mismatch</em>?</p> 
Answer::
Это несоответствие между объектной и реляционной моделями в части концепций, не имеющих логического эквивалента.
Question::NB_TYPE
Text::
<p>Для класса Employee со следующей структурой.</p>
<p><img src="Pro_JPA_2_Ch1_01.PNG" alt="" /></p>
<p>можно предложить несколько возможных БД-представлений:</p>
<p><img src="Pro_JPA_2_Ch1_02.PNG" alt="" /></p>
<p>Вариант <strong>А</strong> самый естественный.&nbsp; Вариант <strong>B</strong> отражает вероятность того, что приходится подлаживаться под имеющуюся БД, структуру которй сложно изменить. Вариант <strong>C</strong> реализован для того, чтобы дать возможность администратору БД ограничить доступ к данным о зарплате. Для приложения это говорит о том, что любое изменение объекта Employee приведет к неоходимости работать сразу с двумя таблицами.</p>
p.4 Clearly, even storing the data from a single class in a database can be a challenging exercise.